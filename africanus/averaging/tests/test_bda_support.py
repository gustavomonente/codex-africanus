# -*- coding: utf-8 -*-

from africanus.averaging.bda_support import Δuvw_Δtime, decorrelation
from africanus.coordinates import radec_to_lm

import numpy as np
import pytest


@pytest.fixture
def uvw():
    return np.array([
       [179.52266371, -365.69250491,   -9.19476371],
       [179.32748886, -365.78707677,   -9.24147287],
       [179.13474812, -365.88032262,   -9.28817279],
       [178.94038959, -365.97422849,   -9.33486336],
       [178.7475768,  -366.06724891,   -9.38145407],
       [178.55314801, -366.16092651,   -9.42803542],
       [178.35869973, -366.25448308,   -9.47451701],
       [178.16543961, -366.34732906,   -9.52098914],
       [177.97212575, -366.44007005,   -9.567452],
       [177.77879223, -366.53269187,   -9.61381501],
       [177.58387961, -366.62594999,   -9.66007817],
       [177.38924148, -366.71894244,   -9.70633197],
       [177.19578616, -366.81123107,   -9.75257638],
       [177.00075324, -366.90415238,   -9.79872106],
       [176.80722792, -366.99621467,   -9.84485624],
       [176.61212689, -367.08890683,   -9.89089171],
       [176.41820507, -367.18089983,   -9.93691778],
       [176.22423154, -367.27278671,   -9.98293444],
       [176.02904516, -367.36512877,  -10.0287609],
       [175.83500252, -367.4567887,  -10.07466834],
       [175.63938854, -367.54907125,  -10.12047608],
       [175.44494932, -367.64066048,  -10.1662744],
       [175.25114653, -367.73181786,  -10.21197283],
       [175.05544868, -367.82374955,  -10.25757158],
       [174.86056163, -367.91516089,  -10.30325136],
       [174.66512471, -368.00670699,  -10.34874091],
       [174.4701695,  -368.09789032,  -10.39431147],
       [174.27585272, -368.18864285,  -10.43978215],
       [174.08118991, -368.27943127,  -10.48515317],
       [173.8852598,  -368.37068735,  -10.53051476],
       [173.68865726, -368.4621309,  -10.5757767],
       [173.49387811, -368.55258325,  -10.62102908],
       [173.29871918, -368.64308374,  -10.66627212],
       [173.10354328, -368.73346404,  -10.71141541],
       [172.9083171,  -368.82373723,  -10.75654923],
       [172.71219208, -368.91430322,  -10.80158333]])


@pytest.fixture
def time():
    return np.array([
        5.03373334e+09,   5.03373334e+09,   5.03373335e+09,
        5.03373336e+09,   5.03373337e+09,   5.03373338e+09,
        5.03373338e+09,   5.03373339e+09,   5.03373340e+09,
        5.03373341e+09,   5.03373342e+09,   5.03373342e+09,
        5.03373343e+09,   5.03373344e+09,   5.03373345e+09,
        5.03373346e+09,   5.03373346e+09,   5.03373347e+09,
        5.03373348e+09,   5.03373349e+09,   5.03373350e+09,
        5.03373350e+09,   5.03373351e+09,   5.03373352e+09,
        5.03373353e+09,   5.03373354e+09,   5.03373354e+09,
        5.03373355e+09,   5.03373356e+09,   5.03373357e+09,
        5.03373358e+09,   5.03373358e+09,   5.03373359e+09,
        5.03373360e+09,   5.03373361e+09,   5.03373362e+09])


@pytest.fixture
def interval():
    return np.array([
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697,  7.99661697,  7.99661697,  7.99661697,  7.99661697,
        7.99661697])


@pytest.fixture
def ants():
    return np.array([
       [5109224.29038545,  2006790.35753831, -3239100.60907827],
       [5109247.7157809,   2006736.96831224, -3239096.13639116],
       [5109222.76106102,  2006688.94849795, -3239165.94167899],
       [5109101.13948279,  2006650.38001812, -3239383.31891167],
       [5109132.81491624,  2006798.06346825, -3239242.1849703],
       [5109046.33257705,  2006823.98423929, -3239363.78875328],
       [5109095.03238529,  2006898.89823927, -3239239.95261248],
       [5109082.8918671,  2007045.24176653, -3239169.09131402],
       [5109139.53289849,  2006992.25575245, -3239111.37956843],
       [5109368.62360157,  2006509.64851116, -3239043.72292735],
       [5109490.75061883,  2006708.38364351, -3238726.60664016],
       [5109310.2977957,  2007017.0371345, -3238823.74833534],
       [5109273.32322089,  2007083.40054198, -3238841.20407917],
       [5109233.60247272,  2007298.47483172, -3238770.86653967],
       [5109514.1862076,  2007536.98018719, -3238177.03761655],
       [5109175.83425585,  2007164.6225741, -3238946.9157957],
       [5109093.99046283,  2007162.9306937, -3239078.77530747],
       [5108965.29396408,  2007106.07798817, -3239319.10626408],
       [5108993.64502175,  2006679.78785901, -3239536.3704696],
       [5109111.46526165,  2006445.98820889, -3239491.95574845],
       [5109486.39986795,  2006225.48918911, -3239031.01140517],
       [5109925.48993011,  2006111.83927162, -3238401.39137192],
       [5110109.89167353,  2005177.90721032, -3238688.71487862],
       [5110676.49309192,  2005793.15912039, -3237408.15958056],
       [5109284.52911273,  2006201.59095546, -3239366.63085706],
       [5111608.06713389,  2004721.2262196, -3236602.97648213],
       [5110840.88031587,  2003560.05835788, -3238544.12229424],
       [5109666.45350777,  2004767.93425934, -3239646.10724868],
       [5108767.23563213,  2007556.54497446, -3239354.53798391],
       [5108927.44284297,  2007973.80069955, -3238840.15661171],
       [5110746.29394702,  2007713.62376395, -3236109.83563026],
       [5109561.42891041,  2009946.10154943, -3236606.07622565],
       [5108335.37384839,  2010410.68719286, -3238271.56790951],
       [5107206.7556267,  2009680.79691055, -3240512.45932645],
       [5108231.34344288,  2006391.59690538, -3240926.75417832],
       [5108666.77102205,  2005032.4814725, -3241081.69797118]])


@pytest.fixture
def phase_dir():
    return np.array([5.1461782, -1.11199629])


def test_bda_decorrelation(time, interval, uvw, phase_dir):
    nchan = 4

    freq = np.linspace(.856e9, 2*.856e9, nchan)
    chan_width = np.full(freq.shape, np.diff(freq)[0])

    # All for a single baseline
    ant1 = np.full(time.shape, 0, dtype=np.int32)
    ant2 = np.full(time.shape, 1, dtype=np.int32)

    Δuvw_Δt = Δuvw_Δtime(time, ant1, ant2, uvw)
    assert Δuvw_Δt.shape == uvw.shape

    # Source offset from phase centre
    radec = np.deg2rad([[0.25, 0.01]])

    lm = radec_to_lm(radec, phase_dir)

    factor = decorrelation(uvw, Δuvw_Δt, interval,
                           freq, chan_width,
                           lm.squeeze(),
                           True, True)

    chan_freq = np.linspace(.856e9, 2*.856e9, 4)
    chan_width = (chan_freq[-1] - chan_freq[0]) / chan_freq.shape[0]
    chan_width = np.full_like(chan_freq, chan_width)

    from africanus.averaging.bda_support import decorrelation_map

    ubl = np.unique(np.stack([ant1, ant2], axis=1), axis=0)

    for a1, a2 in ubl:
        decorrelation_map(time, uvw, ant1, ant2,
                          chan_freq, chan_width,
                          a1, a2, l_max=0.015)
